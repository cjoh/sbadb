// Generated by CoffeeScript 1.3.3
(function() {
  var $;

  $ = jQuery;

  $.fn.extend({
    mapSearch: function(options) {
      var change_page, current_params, el, makeAjaxRequest, map, markers, processResults, set_view, settings, update,
        _this = this;
      el = this;
      settings = {
        initial_coordinates: [40, -100],
        initial_zoom: 4,
        tile_layer: 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
        geo_params: {
          ne_lat: function(map) {
            return map.getBounds().getNorthEast().lat;
          },
          ne_lng: function(map) {
            return map.getBounds().getNorthEast().lng;
          },
          sw_lat: function(map) {
            return map.getBounds().getSouthWest().lat;
          },
          sw_lng: function(map) {
            return map.getBounds().getSouthWest().lng;
          }
        },
        json_selector: '',
        result_params: {
          id: 'id',
          latlng: function(result) {
            return [result.latitude, result.longitude];
          }
        },
        ajax: {
          url: '',
          type: 'GET'
        }
      };
      settings = $.extend(settings, options);
      map = L.map(el[0]).setView(settings.initial_coordinates, settings.initial_zoom);
      L.tileLayer(settings.tile_layer).addTo(map);
      markers = [];
      current_params = {};
      makeAjaxRequest = function(new_params) {
        var func, key, request_params, _ref;
        request_params = new_params || current_params;
        _ref = settings.geo_params;
        for (key in _ref) {
          func = _ref[key];
          request_params[key] = func(map);
        }
        console.log(settings.ajax.url + "?" + $.param(request_params));
        return $.ajax({
          url: settings.ajax.url + "?" + $.param(request_params),
          type: settings.ajax.method,
          success: function(data) {
            if (settings.json_selector) {
              return processResults(data[settings.json_selector]);
            } else {
              return processResults(data);
            }
          }
        });
      };
      processResults = function(results) {
        var marker, _i, _len;
        for (_i = 0, _len = markers.length; _i < _len; _i++) {
          marker = markers[_i];
          map.removeLayer(marker);
        }
        return $(results).each(function(key, result) {
          return markers.push(L.marker(settings.result_params.latlng(result)).addTo(map));
        });
      };
      map.on('dragend zoomend', function() {
        return makeAjaxRequest();
      });
      set_view = arguments.callee.set_view = function(latlng, zoom) {
        map.setView(latlng, zoom);
        return update();
      };
      update = arguments.callee.update = function(new_params) {
        return makeAjaxRequest(new_params);
      };
      return change_page = arguments.callee.change_page = function(page) {
        return makeAjaxRequest($.extend(current_params, {
          page: page
        }));
      };
    }
  });

}).call(this);
